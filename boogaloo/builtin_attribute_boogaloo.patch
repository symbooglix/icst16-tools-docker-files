# HG changeset patch
# User Nadia Polikarpova <nadia.polikarpova@gmail.com>
# Date 1424575518 18000
# Node ID f8ac7985ff661278435c9cabc5ca5dce749c50bb
# Parent  8604d1ea7aadc753e5a4d753fe62ad8439d6661f
Added support for builtin div and rem functions. Updated to z3-haskell 0.3.2+.

diff --git a/Language/Boogie/AST.hs b/Language/Boogie/AST.hs
--- a/Language/Boogie/AST.hs
+++ b/Language/Boogie/AST.hs
@@ -177,7 +177,7 @@
 data BareDecl = 
   TypeDecl [NewType] |
   ConstantDecl Bool [Id] Type ParentInfo Bool |                                -- ^ 'ConstantDecl' @unique names type orderSpec complete@
-  FunctionDecl Id [Id] [FArg] FArg (Maybe Expression) |                        -- ^ 'FunctionDecl' @name type_args formals ret body@
+  FunctionDecl [Attribute] Id [Id] [FArg] FArg (Maybe Expression) |            -- ^ 'FunctionDecl' @name type_args formals ret body@
   AxiomDecl Expression |
   VarDecl [IdTypeWhere] |
   ProcedureDecl Id [Id] [IdTypeWhere] [IdTypeWhere] [Contract] (Maybe Body) |  -- ^ 'ProcedureDecl' @name type_args formals rets contract body@
diff --git a/Language/Boogie/Interpreter.hs b/Language/Boogie/Interpreter.hs
--- a/Language/Boogie/Interpreter.hs
+++ b/Language/Boogie/Interpreter.hs
@@ -46,6 +46,7 @@
 import qualified Data.Sequence as Seq
 import qualified Data.Traversable as T
 import qualified Data.Foldable as F
+import Control.Monad
 import Control.Monad.Error hiding (join)
 import Control.Applicative hiding (empty)
 import Control.Monad.State hiding (join)
@@ -1185,7 +1186,7 @@
   mapM_ (detectMacro fs) (M.keys fs)
   where
     processDecl decl = case node decl of
-      FunctionDecl name _ args _ mBody -> processFunction name (map fst args) mBody
+      FunctionDecl attrs name _ args _ mBody -> processFunction name (map fst args) mBody attrs
       ProcedureDecl name _ args rets _ (Just body) -> processProcedureBody name (position decl) (map noWhere args) (map noWhere rets) body
       ImplementationDecl name _ args rets bodies -> mapM_ (processProcedureBody name (position decl) args rets) bodies
       AxiomDecl expr -> extendNameConstraints conGlobals expr
@@ -1203,18 +1204,38 @@
         envFunctions %= M.delete name
       else return ()  
       
-processFunction name argNames mBody = do
+processFunction name argNames mBody attrs = do
   sig@(MapType tv argTypes retType) <- funSig name <$> use envTypeContext
   let constName = functionConst name  
   envTypeContext %= \tc -> tc { ctxConstants = M.insert constName sig (ctxConstants tc) }    
-  case mBody of
+  let formals = zip (map formalName argNames) argTypes
+  case getBody of
     Nothing -> return ()
-    Just body -> do
-      let formals = zip (map formalName argNames) argTypes
-      envFunctions %= M.insert name (inheritPos (Quantified Lambda tv formals) body)
+    Just body -> envFunctions %= M.insert name (inheritPos (Quantified Lambda tv formals) body)
   where        
     formalName Nothing = dummyFArg 
-    formalName (Just n) = n
+    formalName (Just n) = n    
+    
+    getBody = case mBody of
+      Nothing -> builtInBody
+      Just body -> Just body
+    
+    builtInBody = case find (\a -> aTag a == "builtin") attrs of
+      Nothing -> Nothing
+      Just attr -> case head $ aValues attr of
+        SAttr name -> join $ lookup name builtInMap
+        _ -> Nothing
+    builtInMap = [
+      ("div", if length argNames == 2 then Just $ gen $ BinaryExpression Div (formalE 0) (formalE 1) else Nothing), 
+      ("rem", if length argNames == 2 
+                then let modExpr = gen $ BinaryExpression Mod (formalE 0) (formalE 1) in Just $ 
+                  gen $ IfExpr 
+                    (gen $ BinaryExpression Ls (formalE 1) (gen $ Literal $ IntValue 0))
+                    (gen $ UnaryExpression Neg $ modExpr)
+                    modExpr
+                else Nothing)
+      ]
+    formalE i = gen $ Var $ (map formalName argNames) !! i        
     
 processProcedureBody name pos args rets body = do
   tc <- use envTypeContext
diff --git a/Language/Boogie/Parser.hs b/Language/Boogie/Parser.hs
--- a/Language/Boogie/Parser.hs
+++ b/Language/Boogie/Parser.hs
@@ -359,13 +359,13 @@
 functionDecl :: Parser BareDecl
 functionDecl = do
   reserved "function"
-  void (many attribute)
+  attrs <- many attribute
   name <- identifier
   tArgs <- typeArgs
   args <- parens (option [] (try namedArgs <|> unnamedArgs))  
   ret <- returns <|> returnType
   body <- (semi >> return Nothing) <|> (Just <$> braces expression)
-  return $ FunctionDecl name tArgs args ret body
+  return $ FunctionDecl attrs name tArgs args ret body
   where
     unnamedArgs = map (\t -> (Nothing, t))                  <$> commaSep1 type_
     namedArgs =   map (\(id, t) -> (Just id, t)) . ungroup  <$> commaSep1 idsType
diff --git a/Language/Boogie/PrettyAST.hs b/Language/Boogie/PrettyAST.hs
--- a/Language/Boogie/PrettyAST.hs
+++ b/Language/Boogie/PrettyAST.hs
@@ -153,7 +153,7 @@
   pretty d = case d of
     TypeDecl ts -> typeDeclDoc ts
     ConstantDecl unique names t orderSpec complete -> constantDoc unique names t orderSpec complete
-    FunctionDecl name fv args ret mb -> functionDoc name fv args ret mb
+    FunctionDecl attrs name fv args ret mb -> functionDoc attrs name fv args ret mb
     AxiomDecl e -> text "axiom" <+> pretty e <> semi
     VarDecl vars -> varDeclDoc vars
     ProcedureDecl name fv args rets specs mb -> procedureDoc name fv args rets specs mb
@@ -178,8 +178,9 @@
     orderSpecDoc parents = text "extends" <+> commaSep (map parentDoc parents)
     parentDoc (u, id) = option u (text "unique") <+> text id
     
-functionDoc name fv args ret mb =
+functionDoc attrs name fv args ret mb =
   text "function" <+>
+  hsep (map pretty attrs) <+>
   text name <>
   typeArgsDoc fv <>
   parens (commaSep (map fArgDoc args)) <+>
diff --git a/Language/Boogie/TypeChecker.hs b/Language/Boogie/TypeChecker.hs
--- a/Language/Boogie/TypeChecker.hs
+++ b/Language/Boogie/TypeChecker.hs
@@ -643,7 +643,7 @@
   case d of
     VarDecl vars -> mapAccum_ (checkIdType globalScope ctxGlobals setGlobals) (map noWhere vars)
     ConstantDecl _ ids t _ _ -> mapAccum_ (checkIdType globalScope ctxConstants setConstants) (zip ids (repeat t))
-    FunctionDecl name tv args ret _ -> checkFunctionSignature name tv args ret
+    FunctionDecl _ name tv args ret _ -> checkFunctionSignature name tv args ret
     ProcedureDecl name tv args rets specs _ -> checkProcSignature name tv args rets specs
     otherwise -> return ()
 
@@ -715,7 +715,7 @@
     VarDecl vars -> mapAccum_ checkWhere vars
     ConstantDecl _ ids t (Just edges) _ -> locally $ checkParentInfo ids t (map snd edges)
     AxiomDecl e -> locally $ checkAxiom e
-    FunctionDecl name tv args _ (Just body) -> locally $ checkFunction name tv args body
+    FunctionDecl _ name tv args _ (Just body) -> locally $ checkFunction name tv args body
     ProcedureDecl name tv args rets specs mb -> locally $ checkProcedure tv args rets specs mb
     ImplementationDecl name tv args rets bodies -> locally $ checkImplementation name tv args rets bodies
     otherwise -> return ()
